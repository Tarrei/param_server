// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ps {
class meta;
class metaDefaultTypeInternal;
extern metaDefaultTypeInternal _meta_default_instance_;
class meta_node_;
class meta_node_DefaultTypeInternal;
extern meta_node_DefaultTypeInternal _meta_node__default_instance_;
}  // namespace ps

namespace ps {

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_message_2eproto

enum meta_node__r {
  meta_node__r_SCHEDULER = 0,
  meta_node__r_SERVER = 1,
  meta_node__r_WORKER = 2
};
bool meta_node__r_IsValid(int value);
const meta_node__r meta_node__r_r_MIN = meta_node__r_SCHEDULER;
const meta_node__r meta_node__r_r_MAX = meta_node__r_WORKER;
const int meta_node__r_r_ARRAYSIZE = meta_node__r_r_MAX + 1;

const ::google::protobuf::EnumDescriptor* meta_node__r_descriptor();
inline const ::std::string& meta_node__r_Name(meta_node__r value) {
  return ::google::protobuf::internal::NameOfEnum(
    meta_node__r_descriptor(), value);
}
inline bool meta_node__r_Parse(
    const ::std::string& name, meta_node__r* value) {
  return ::google::protobuf::internal::ParseNamedEnum<meta_node__r>(
    meta_node__r_descriptor(), name, value);
}
enum meta_command {
  meta_command_EMPTY = 0,
  meta_command_ADD_NODE = 1,
  meta_command_TERMINATE = 2,
  meta_command_ACK = 3,
  meta_command_HEARTBEAT = 4
};
bool meta_command_IsValid(int value);
const meta_command meta_command_command_MIN = meta_command_EMPTY;
const meta_command meta_command_command_MAX = meta_command_HEARTBEAT;
const int meta_command_command_ARRAYSIZE = meta_command_command_MAX + 1;

const ::google::protobuf::EnumDescriptor* meta_command_descriptor();
inline const ::std::string& meta_command_Name(meta_command value) {
  return ::google::protobuf::internal::NameOfEnum(
    meta_command_descriptor(), value);
}
inline bool meta_command_Parse(
    const ::std::string& name, meta_command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<meta_command>(
    meta_command_descriptor(), name, value);
}
enum meta_type_ {
  meta_type__CHAR = 0,
  meta_type__INT8 = 1,
  meta_type__INT16 = 2,
  meta_type__INT32 = 3,
  meta_type__INT64 = 4,
  meta_type__UINT8 = 5,
  meta_type__UINT16 = 6,
  meta_type__UINT32 = 7,
  meta_type__UINT64 = 8,
  meta_type__FLOAT = 9,
  meta_type__DOUBLE = 10,
  meta_type__OTHER = 11
};
bool meta_type__IsValid(int value);
const meta_type_ meta_type__type__MIN = meta_type__CHAR;
const meta_type_ meta_type__type__MAX = meta_type__OTHER;
const int meta_type__type__ARRAYSIZE = meta_type__type__MAX + 1;

const ::google::protobuf::EnumDescriptor* meta_type__descriptor();
inline const ::std::string& meta_type__Name(meta_type_ value) {
  return ::google::protobuf::internal::NameOfEnum(
    meta_type__descriptor(), value);
}
inline bool meta_type__Parse(
    const ::std::string& name, meta_type_* value) {
  return ::google::protobuf::internal::ParseNamedEnum<meta_type_>(
    meta_type__descriptor(), name, value);
}
// ===================================================================

class meta_node_ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ps.meta.node_) */ {
 public:
  meta_node_();
  virtual ~meta_node_();

  meta_node_(const meta_node_& from);

  inline meta_node_& operator=(const meta_node_& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const meta_node_& default_instance();

  static inline const meta_node_* internal_default_instance() {
    return reinterpret_cast<const meta_node_*>(
               &_meta_node__default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(meta_node_* other);

  // implements Message ----------------------------------------------

  inline meta_node_* New() const PROTOBUF_FINAL { return New(NULL); }

  meta_node_* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const meta_node_& from);
  void MergeFrom(const meta_node_& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(meta_node_* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef meta_node__r r;
  static const r SCHEDULER =
    meta_node__r_SCHEDULER;
  static const r SERVER =
    meta_node__r_SERVER;
  static const r WORKER =
    meta_node__r_WORKER;
  static inline bool r_IsValid(int value) {
    return meta_node__r_IsValid(value);
  }
  static const r r_MIN =
    meta_node__r_r_MIN;
  static const r r_MAX =
    meta_node__r_r_MAX;
  static const int r_ARRAYSIZE =
    meta_node__r_r_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  r_descriptor() {
    return meta_node__r_descriptor();
  }
  static inline const ::std::string& r_Name(r value) {
    return meta_node__r_Name(value);
  }
  static inline bool r_Parse(const ::std::string& name,
      r* value) {
    return meta_node__r_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string hostname = 3;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // required .ps.meta.node_.r role = 1;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 1;
  ::ps::meta_node__r role() const;
  void set_role(::ps::meta_node__r value);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 port = 4;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // optional bool is_recovery = 5;
  bool has_is_recovery() const;
  void clear_is_recovery();
  static const int kIsRecoveryFieldNumber = 5;
  bool is_recovery() const;
  void set_is_recovery(bool value);

  // @@protoc_insertion_point(class_scope:ps.meta.node_)
 private:
  void set_has_role();
  void clear_has_role();
  void set_has_id();
  void clear_has_id();
  void set_has_hostname();
  void clear_has_hostname();
  void set_has_port();
  void clear_has_port();
  void set_has_is_recovery();
  void clear_has_is_recovery();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  int role_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 port_;
  bool is_recovery_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class meta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ps.meta) */ {
 public:
  meta();
  virtual ~meta();

  meta(const meta& from);

  inline meta& operator=(const meta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const meta& default_instance();

  static inline const meta* internal_default_instance() {
    return reinterpret_cast<const meta*>(
               &_meta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(meta* other);

  // implements Message ----------------------------------------------

  inline meta* New() const PROTOBUF_FINAL { return New(NULL); }

  meta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const meta& from);
  void MergeFrom(const meta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(meta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef meta_node_ node_;

  typedef meta_command command;
  static const command EMPTY =
    meta_command_EMPTY;
  static const command ADD_NODE =
    meta_command_ADD_NODE;
  static const command TERMINATE =
    meta_command_TERMINATE;
  static const command ACK =
    meta_command_ACK;
  static const command HEARTBEAT =
    meta_command_HEARTBEAT;
  static inline bool command_IsValid(int value) {
    return meta_command_IsValid(value);
  }
  static const command command_MIN =
    meta_command_command_MIN;
  static const command command_MAX =
    meta_command_command_MAX;
  static const int command_ARRAYSIZE =
    meta_command_command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  command_descriptor() {
    return meta_command_descriptor();
  }
  static inline const ::std::string& command_Name(command value) {
    return meta_command_Name(value);
  }
  static inline bool command_Parse(const ::std::string& name,
      command* value) {
    return meta_command_Parse(name, value);
  }

  typedef meta_type_ type_;
  static const type_ CHAR =
    meta_type__CHAR;
  static const type_ INT8 =
    meta_type__INT8;
  static const type_ INT16 =
    meta_type__INT16;
  static const type_ INT32 =
    meta_type__INT32;
  static const type_ INT64 =
    meta_type__INT64;
  static const type_ UINT8 =
    meta_type__UINT8;
  static const type_ UINT16 =
    meta_type__UINT16;
  static const type_ UINT32 =
    meta_type__UINT32;
  static const type_ UINT64 =
    meta_type__UINT64;
  static const type_ FLOAT =
    meta_type__FLOAT;
  static const type_ DOUBLE =
    meta_type__DOUBLE;
  static const type_ OTHER =
    meta_type__OTHER;
  static inline bool type__IsValid(int value) {
    return meta_type__IsValid(value);
  }
  static const type_ type__MIN =
    meta_type__type__MIN;
  static const type_ type__MAX =
    meta_type__type__MAX;
  static const int type__ARRAYSIZE =
    meta_type__type__ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type__descriptor() {
    return meta_type__descriptor();
  }
  static inline const ::std::string& type__Name(type_ value) {
    return meta_type__Name(value);
  }
  static inline bool type__Parse(const ::std::string& name,
      type_* value) {
    return meta_type__Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ps.meta.node_ node = 7;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 7;
  const ::ps::meta_node_& node(int index) const;
  ::ps::meta_node_* mutable_node(int index);
  ::ps::meta_node_* add_node();
  ::google::protobuf::RepeatedPtrField< ::ps::meta_node_ >*
      mutable_node();
  const ::google::protobuf::RepeatedPtrField< ::ps::meta_node_ >&
      node() const;

  // repeated .ps.meta.type_ data_type = 8;
  int data_type_size() const;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 8;
  ::ps::meta_type_ data_type(int index) const;
  void set_data_type(int index, ::ps::meta_type_ value);
  void add_data_type(::ps::meta_type_ value);
  const ::google::protobuf::RepeatedField<int>& data_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_data_type();

  // required .ps.meta.command cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::ps::meta_command cmd() const;
  void set_cmd(::ps::meta_command value);

  // required int32 sender = 2;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  ::google::protobuf::int32 sender() const;
  void set_sender(::google::protobuf::int32 value);

  // required int32 receiver = 3;
  bool has_receiver() const;
  void clear_receiver();
  static const int kReceiverFieldNumber = 3;
  ::google::protobuf::int32 receiver() const;
  void set_receiver(::google::protobuf::int32 value);

  // required int32 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // required bool request = 5;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 5;
  bool request() const;
  void set_request(bool value);

  // required bool push = 6;
  bool has_push() const;
  void clear_push();
  static const int kPushFieldNumber = 6;
  bool push() const;
  void set_push(bool value);

  // @@protoc_insertion_point(class_scope:ps.meta)
 private:
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_sender();
  void clear_has_sender();
  void set_has_receiver();
  void clear_has_receiver();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_request();
  void clear_has_request();
  void set_has_push();
  void clear_has_push();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ps::meta_node_ > node_;
  ::google::protobuf::RepeatedField<int> data_type_;
  int cmd_;
  ::google::protobuf::int32 sender_;
  ::google::protobuf::int32 receiver_;
  ::google::protobuf::int32 timestamp_;
  bool request_;
  bool push_;
  friend struct protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// meta_node_

// required .ps.meta.node_.r role = 1;
inline bool meta_node_::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void meta_node_::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void meta_node_::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void meta_node_::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::ps::meta_node__r meta_node_::role() const {
  // @@protoc_insertion_point(field_get:ps.meta.node_.role)
  return static_cast< ::ps::meta_node__r >(role_);
}
inline void meta_node_::set_role(::ps::meta_node__r value) {
  assert(::ps::meta_node__r_IsValid(value));
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.node_.role)
}

// required int32 id = 2;
inline bool meta_node_::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void meta_node_::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void meta_node_::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void meta_node_::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 meta_node_::id() const {
  // @@protoc_insertion_point(field_get:ps.meta.node_.id)
  return id_;
}
inline void meta_node_::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.node_.id)
}

// required string hostname = 3;
inline bool meta_node_::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void meta_node_::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void meta_node_::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void meta_node_::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& meta_node_::hostname() const {
  // @@protoc_insertion_point(field_get:ps.meta.node_.hostname)
  return hostname_.GetNoArena();
}
inline void meta_node_::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ps.meta.node_.hostname)
}
#if LANG_CXX11
inline void meta_node_::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ps.meta.node_.hostname)
}
#endif
inline void meta_node_::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ps.meta.node_.hostname)
}
inline void meta_node_::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ps.meta.node_.hostname)
}
inline ::std::string* meta_node_::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:ps.meta.node_.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* meta_node_::release_hostname() {
  // @@protoc_insertion_point(field_release:ps.meta.node_.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void meta_node_::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:ps.meta.node_.hostname)
}

// required int32 port = 4;
inline bool meta_node_::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void meta_node_::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void meta_node_::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void meta_node_::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 meta_node_::port() const {
  // @@protoc_insertion_point(field_get:ps.meta.node_.port)
  return port_;
}
inline void meta_node_::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.node_.port)
}

// optional bool is_recovery = 5;
inline bool meta_node_::has_is_recovery() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void meta_node_::set_has_is_recovery() {
  _has_bits_[0] |= 0x00000010u;
}
inline void meta_node_::clear_has_is_recovery() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void meta_node_::clear_is_recovery() {
  is_recovery_ = false;
  clear_has_is_recovery();
}
inline bool meta_node_::is_recovery() const {
  // @@protoc_insertion_point(field_get:ps.meta.node_.is_recovery)
  return is_recovery_;
}
inline void meta_node_::set_is_recovery(bool value) {
  set_has_is_recovery();
  is_recovery_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.node_.is_recovery)
}

// -------------------------------------------------------------------

// meta

// required .ps.meta.command cmd = 1;
inline bool meta::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void meta::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void meta::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void meta::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::ps::meta_command meta::cmd() const {
  // @@protoc_insertion_point(field_get:ps.meta.cmd)
  return static_cast< ::ps::meta_command >(cmd_);
}
inline void meta::set_cmd(::ps::meta_command value) {
  assert(::ps::meta_command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.cmd)
}

// required int32 sender = 2;
inline bool meta::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void meta::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void meta::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void meta::clear_sender() {
  sender_ = 0;
  clear_has_sender();
}
inline ::google::protobuf::int32 meta::sender() const {
  // @@protoc_insertion_point(field_get:ps.meta.sender)
  return sender_;
}
inline void meta::set_sender(::google::protobuf::int32 value) {
  set_has_sender();
  sender_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.sender)
}

// required int32 receiver = 3;
inline bool meta::has_receiver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void meta::set_has_receiver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void meta::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void meta::clear_receiver() {
  receiver_ = 0;
  clear_has_receiver();
}
inline ::google::protobuf::int32 meta::receiver() const {
  // @@protoc_insertion_point(field_get:ps.meta.receiver)
  return receiver_;
}
inline void meta::set_receiver(::google::protobuf::int32 value) {
  set_has_receiver();
  receiver_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.receiver)
}

// required int32 timestamp = 4;
inline bool meta::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void meta::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void meta::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void meta::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 meta::timestamp() const {
  // @@protoc_insertion_point(field_get:ps.meta.timestamp)
  return timestamp_;
}
inline void meta::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.timestamp)
}

// required bool request = 5;
inline bool meta::has_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void meta::set_has_request() {
  _has_bits_[0] |= 0x00000010u;
}
inline void meta::clear_has_request() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void meta::clear_request() {
  request_ = false;
  clear_has_request();
}
inline bool meta::request() const {
  // @@protoc_insertion_point(field_get:ps.meta.request)
  return request_;
}
inline void meta::set_request(bool value) {
  set_has_request();
  request_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.request)
}

// required bool push = 6;
inline bool meta::has_push() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void meta::set_has_push() {
  _has_bits_[0] |= 0x00000020u;
}
inline void meta::clear_has_push() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void meta::clear_push() {
  push_ = false;
  clear_has_push();
}
inline bool meta::push() const {
  // @@protoc_insertion_point(field_get:ps.meta.push)
  return push_;
}
inline void meta::set_push(bool value) {
  set_has_push();
  push_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.push)
}

// repeated .ps.meta.node_ node = 7;
inline int meta::node_size() const {
  return node_.size();
}
inline void meta::clear_node() {
  node_.Clear();
}
inline const ::ps::meta_node_& meta::node(int index) const {
  // @@protoc_insertion_point(field_get:ps.meta.node)
  return node_.Get(index);
}
inline ::ps::meta_node_* meta::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:ps.meta.node)
  return node_.Mutable(index);
}
inline ::ps::meta_node_* meta::add_node() {
  // @@protoc_insertion_point(field_add:ps.meta.node)
  return node_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ps::meta_node_ >*
meta::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:ps.meta.node)
  return &node_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ps::meta_node_ >&
meta::node() const {
  // @@protoc_insertion_point(field_list:ps.meta.node)
  return node_;
}

// repeated .ps.meta.type_ data_type = 8;
inline int meta::data_type_size() const {
  return data_type_.size();
}
inline void meta::clear_data_type() {
  data_type_.Clear();
}
inline ::ps::meta_type_ meta::data_type(int index) const {
  // @@protoc_insertion_point(field_get:ps.meta.data_type)
  return static_cast< ::ps::meta_type_ >(data_type_.Get(index));
}
inline void meta::set_data_type(int index, ::ps::meta_type_ value) {
  assert(::ps::meta_type__IsValid(value));
  data_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ps.meta.data_type)
}
inline void meta::add_data_type(::ps::meta_type_ value) {
  assert(::ps::meta_type__IsValid(value));
  data_type_.Add(value);
  // @@protoc_insertion_point(field_add:ps.meta.data_type)
}
inline const ::google::protobuf::RepeatedField<int>&
meta::data_type() const {
  // @@protoc_insertion_point(field_list:ps.meta.data_type)
  return data_type_;
}
inline ::google::protobuf::RepeatedField<int>*
meta::mutable_data_type() {
  // @@protoc_insertion_point(field_mutable_list:ps.meta.data_type)
  return &data_type_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace ps

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ps::meta_node__r> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ps::meta_node__r>() {
  return ::ps::meta_node__r_descriptor();
}
template <> struct is_proto_enum< ::ps::meta_command> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ps::meta_command>() {
  return ::ps::meta_command_descriptor();
}
template <> struct is_proto_enum< ::ps::meta_type_> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ps::meta_type_>() {
  return ::ps::meta_type__descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
