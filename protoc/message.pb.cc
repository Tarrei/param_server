// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ps {
class meta_node_DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<meta_node_> {
} _meta_node__default_instance_;
class metaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<meta> {
} _meta_default_instance_;

namespace protobuf_message_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_node_, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_node_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_node_, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_node_, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_node_, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_node_, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta_node_, is_recovery_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, receiver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, push_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(meta, data_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(meta_node_)},
  { 15, 28, sizeof(meta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_meta_node__default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_meta_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _meta_node__default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _meta_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _meta_node__default_instance_.DefaultConstruct();
  _meta_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmessage.proto\022\002ps\"\254\004\n\004meta\022\035\n\003cmd\030\001 \002("
      "\0162\020.ps.meta.command\022\016\n\006sender\030\002 \002(\005\022\020\n\010r"
      "eceiver\030\003 \002(\005\022\021\n\ttimestamp\030\004 \002(\005\022\017\n\007requ"
      "est\030\005 \002(\010\022\014\n\004push\030\006 \002(\010\022\034\n\004node\030\007 \003(\0132\016."
      "ps.meta.node_\022!\n\tdata_type\030\010 \003(\0162\016.ps.me"
      "ta.type_\032\224\001\n\005node_\022\036\n\004role\030\001 \002(\0162\020.ps.me"
      "ta.node_.r\022\n\n\002id\030\002 \002(\005\022\020\n\010hostname\030\003 \002(\t"
      "\022\014\n\004port\030\004 \002(\005\022\023\n\013is_recovery\030\005 \001(\010\"*\n\001r"
      "\022\r\n\tSCHEDULER\020\000\022\n\n\006SERVER\020\001\022\n\n\006WORKER\020\002\""
      "I\n\007command\022\t\n\005EMPTY\020\000\022\014\n\010ADD_NODE\020\001\022\r\n\tT"
      "ERMINATE\020\002\022\007\n\003ACK\020\003\022\r\n\tHEARTBEAT\020\004\"\215\001\n\005t"
      "ype_\022\010\n\004CHAR\020\000\022\010\n\004INT8\020\001\022\t\n\005INT16\020\002\022\t\n\005I"
      "NT32\020\003\022\t\n\005INT64\020\004\022\t\n\005UINT8\020\005\022\n\n\006UINT16\020\006"
      "\022\n\n\006UINT32\020\007\022\n\n\006UINT64\020\010\022\t\n\005FLOAT\020\t\022\n\n\006D"
      "OUBLE\020\n\022\t\n\005OTHER\020\013"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 578);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_message_2eproto

const ::google::protobuf::EnumDescriptor* meta_node__r_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool meta_node__r_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const meta_node__r meta_node_::SCHEDULER;
const meta_node__r meta_node_::SERVER;
const meta_node__r meta_node_::WORKER;
const meta_node__r meta_node_::r_MIN;
const meta_node__r meta_node_::r_MAX;
const int meta_node_::r_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* meta_command_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[1];
}
bool meta_command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const meta_command meta::EMPTY;
const meta_command meta::ADD_NODE;
const meta_command meta::TERMINATE;
const meta_command meta::ACK;
const meta_command meta::HEARTBEAT;
const meta_command meta::command_MIN;
const meta_command meta::command_MAX;
const int meta::command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* meta_type__descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[2];
}
bool meta_type__IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const meta_type_ meta::CHAR;
const meta_type_ meta::INT8;
const meta_type_ meta::INT16;
const meta_type_ meta::INT32;
const meta_type_ meta::INT64;
const meta_type_ meta::UINT8;
const meta_type_ meta::UINT16;
const meta_type_ meta::UINT32;
const meta_type_ meta::UINT64;
const meta_type_ meta::FLOAT;
const meta_type_ meta::DOUBLE;
const meta_type_ meta::OTHER;
const meta_type_ meta::type__MIN;
const meta_type_ meta::type__MAX;
const int meta::type__ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int meta_node_::kRoleFieldNumber;
const int meta_node_::kIdFieldNumber;
const int meta_node_::kHostnameFieldNumber;
const int meta_node_::kPortFieldNumber;
const int meta_node_::kIsRecoveryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

meta_node_::meta_node_()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ps.meta.node_)
}
meta_node_::meta_node_(const meta_node_& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ::memcpy(&role_, &from.role_,
    reinterpret_cast<char*>(&is_recovery_) -
    reinterpret_cast<char*>(&role_) + sizeof(is_recovery_));
  // @@protoc_insertion_point(copy_constructor:ps.meta.node_)
}

void meta_node_::SharedCtor() {
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_, 0, reinterpret_cast<char*>(&is_recovery_) -
    reinterpret_cast<char*>(&role_) + sizeof(is_recovery_));
}

meta_node_::~meta_node_() {
  // @@protoc_insertion_point(destructor:ps.meta.node_)
  SharedDtor();
}

void meta_node_::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void meta_node_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* meta_node_::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const meta_node_& meta_node_::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

meta_node_* meta_node_::New(::google::protobuf::Arena* arena) const {
  meta_node_* n = new meta_node_;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void meta_node_::Clear() {
// @@protoc_insertion_point(message_clear_start:ps.meta.node_)
  if (has_hostname()) {
    GOOGLE_DCHECK(!hostname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hostname_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&role_, 0, reinterpret_cast<char*>(&is_recovery_) -
      reinterpret_cast<char*>(&role_) + sizeof(is_recovery_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool meta_node_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ps.meta.node_)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ps.meta.node_.r role = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ps::meta_node__r_IsValid(value)) {
            set_role(static_cast< ::ps::meta_node__r >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hostname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ps.meta.node_.hostname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_recovery = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_recovery();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recovery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ps.meta.node_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ps.meta.node_)
  return false;
#undef DO_
}

void meta_node_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ps.meta.node_)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ps.meta.node_.r role = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->role(), output);
  }

  // required int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required string hostname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ps.meta.node_.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hostname(), output);
  }

  // required int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional bool is_recovery = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_recovery(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ps.meta.node_)
}

::google::protobuf::uint8* meta_node_::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ps.meta.node_)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ps.meta.node_.r role = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->role(), target);
  }

  // required int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required string hostname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ps.meta.node_.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // required int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional bool is_recovery = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_recovery(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ps.meta.node_)
  return target;
}

size_t meta_node_::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ps.meta.node_)
  size_t total_size = 0;

  if (has_hostname()) {
    // required string hostname = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  if (has_role()) {
    // required .ps.meta.node_.r role = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
  }

  if (has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_port()) {
    // required int32 port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t meta_node_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ps.meta.node_)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string hostname = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());

    // required .ps.meta.node_.r role = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());

    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool is_recovery = 5;
  if (has_is_recovery()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void meta_node_::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ps.meta.node_)
  GOOGLE_DCHECK_NE(&from, this);
  const meta_node_* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const meta_node_>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ps.meta.node_)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ps.meta.node_)
    MergeFrom(*source);
  }
}

void meta_node_::MergeFrom(const meta_node_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ps.meta.node_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_recovery_ = from.is_recovery_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void meta_node_::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ps.meta.node_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void meta_node_::CopyFrom(const meta_node_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ps.meta.node_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meta_node_::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void meta_node_::Swap(meta_node_* other) {
  if (other == this) return;
  InternalSwap(other);
}
void meta_node_::InternalSwap(meta_node_* other) {
  hostname_.Swap(&other->hostname_);
  std::swap(role_, other->role_);
  std::swap(id_, other->id_);
  std::swap(port_, other->port_);
  std::swap(is_recovery_, other->is_recovery_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata meta_node_::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// meta_node_

// required .ps.meta.node_.r role = 1;
bool meta_node_::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void meta_node_::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
void meta_node_::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
void meta_node_::clear_role() {
  role_ = 0;
  clear_has_role();
}
::ps::meta_node__r meta_node_::role() const {
  // @@protoc_insertion_point(field_get:ps.meta.node_.role)
  return static_cast< ::ps::meta_node__r >(role_);
}
void meta_node_::set_role(::ps::meta_node__r value) {
  assert(::ps::meta_node__r_IsValid(value));
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.node_.role)
}

// required int32 id = 2;
bool meta_node_::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void meta_node_::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void meta_node_::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void meta_node_::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 meta_node_::id() const {
  // @@protoc_insertion_point(field_get:ps.meta.node_.id)
  return id_;
}
void meta_node_::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.node_.id)
}

// required string hostname = 3;
bool meta_node_::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void meta_node_::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void meta_node_::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void meta_node_::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
const ::std::string& meta_node_::hostname() const {
  // @@protoc_insertion_point(field_get:ps.meta.node_.hostname)
  return hostname_.GetNoArena();
}
void meta_node_::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ps.meta.node_.hostname)
}
#if LANG_CXX11
void meta_node_::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ps.meta.node_.hostname)
}
#endif
void meta_node_::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ps.meta.node_.hostname)
}
void meta_node_::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ps.meta.node_.hostname)
}
::std::string* meta_node_::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:ps.meta.node_.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* meta_node_::release_hostname() {
  // @@protoc_insertion_point(field_release:ps.meta.node_.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void meta_node_::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:ps.meta.node_.hostname)
}

// required int32 port = 4;
bool meta_node_::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void meta_node_::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
void meta_node_::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void meta_node_::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 meta_node_::port() const {
  // @@protoc_insertion_point(field_get:ps.meta.node_.port)
  return port_;
}
void meta_node_::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.node_.port)
}

// optional bool is_recovery = 5;
bool meta_node_::has_is_recovery() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void meta_node_::set_has_is_recovery() {
  _has_bits_[0] |= 0x00000010u;
}
void meta_node_::clear_has_is_recovery() {
  _has_bits_[0] &= ~0x00000010u;
}
void meta_node_::clear_is_recovery() {
  is_recovery_ = false;
  clear_has_is_recovery();
}
bool meta_node_::is_recovery() const {
  // @@protoc_insertion_point(field_get:ps.meta.node_.is_recovery)
  return is_recovery_;
}
void meta_node_::set_is_recovery(bool value) {
  set_has_is_recovery();
  is_recovery_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.node_.is_recovery)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int meta::kCmdFieldNumber;
const int meta::kSenderFieldNumber;
const int meta::kReceiverFieldNumber;
const int meta::kTimestampFieldNumber;
const int meta::kRequestFieldNumber;
const int meta::kPushFieldNumber;
const int meta::kNodeFieldNumber;
const int meta::kDataTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

meta::meta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ps.meta)
}
meta::meta(const meta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      node_(from.node_),
      data_type_(from.data_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmd_, &from.cmd_,
    reinterpret_cast<char*>(&push_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(push_));
  // @@protoc_insertion_point(copy_constructor:ps.meta)
}

void meta::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cmd_, 0, reinterpret_cast<char*>(&push_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(push_));
}

meta::~meta() {
  // @@protoc_insertion_point(destructor:ps.meta)
  SharedDtor();
}

void meta::SharedDtor() {
}

void meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* meta::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const meta& meta::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

meta* meta::New(::google::protobuf::Arena* arena) const {
  meta* n = new meta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void meta::Clear() {
// @@protoc_insertion_point(message_clear_start:ps.meta)
  node_.Clear();
  data_type_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&cmd_, 0, reinterpret_cast<char*>(&push_) -
      reinterpret_cast<char*>(&cmd_) + sizeof(push_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ps.meta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ps.meta.command cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ps::meta_command_IsValid(value)) {
            set_cmd(static_cast< ::ps::meta_command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 receiver = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_receiver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_request();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool push = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_push();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ps.meta.node_ node = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ps.meta.type_ data_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ps::meta_type__IsValid(value)) {
            add_data_type(static_cast< ::ps::meta_type_ >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::ps::meta_type__IsValid,
                 mutable_unknown_fields(),
                 this->mutable_data_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ps.meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ps.meta)
  return false;
#undef DO_
}

void meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ps.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ps.meta.command cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // required int32 sender = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sender(), output);
  }

  // required int32 receiver = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->receiver(), output);
  }

  // required int32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timestamp(), output);
  }

  // required bool request = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->request(), output);
  }

  // required bool push = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->push(), output);
  }

  // repeated .ps.meta.node_ node = 7;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->node(i), output);
  }

  // repeated .ps.meta.type_ data_type = 8;
  for (int i = 0, n = this->data_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->data_type(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ps.meta)
}

::google::protobuf::uint8* meta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ps.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ps.meta.command cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // required int32 sender = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sender(), target);
  }

  // required int32 receiver = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->receiver(), target);
  }

  // required int32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timestamp(), target);
  }

  // required bool request = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->request(), target);
  }

  // required bool push = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->push(), target);
  }

  // repeated .ps.meta.node_ node = 7;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->node(i), deterministic, target);
  }

  // repeated .ps.meta.type_ data_type = 8;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    8, this->data_type_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ps.meta)
  return target;
}

size_t meta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ps.meta)
  size_t total_size = 0;

  if (has_cmd()) {
    // required .ps.meta.command cmd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }

  if (has_sender()) {
    // required int32 sender = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender());
  }

  if (has_receiver()) {
    // required int32 receiver = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->receiver());
  }

  if (has_timestamp()) {
    // required int32 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  if (has_request()) {
    // required bool request = 5;
    total_size += 1 + 1;
  }

  if (has_push()) {
    // required bool push = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ps.meta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .ps.meta.command cmd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());

    // required int32 sender = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender());

    // required int32 receiver = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->receiver());

    // required int32 timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());

    // required bool request = 5;
    total_size += 1 + 1;

    // required bool push = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ps.meta.node_ node = 7;
  {
    unsigned int count = this->node_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node(i));
    }
  }

  // repeated .ps.meta.type_ data_type = 8;
  {
    size_t data_size = 0;
    unsigned int count = this->data_type_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->data_type(i));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void meta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ps.meta)
  GOOGLE_DCHECK_NE(&from, this);
  const meta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const meta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ps.meta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ps.meta)
    MergeFrom(*source);
  }
}

void meta::MergeFrom(const meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ps.meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  data_type_.MergeFrom(from.data_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      sender_ = from.sender_;
    }
    if (cached_has_bits & 0x00000004u) {
      receiver_ = from.receiver_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_ = from.request_;
    }
    if (cached_has_bits & 0x00000020u) {
      push_ = from.push_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void meta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ps.meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void meta::CopyFrom(const meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ps.meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meta::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void meta::Swap(meta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void meta::InternalSwap(meta* other) {
  node_.InternalSwap(&other->node_);
  data_type_.InternalSwap(&other->data_type_);
  std::swap(cmd_, other->cmd_);
  std::swap(sender_, other->sender_);
  std::swap(receiver_, other->receiver_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(request_, other->request_);
  std::swap(push_, other->push_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata meta::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// meta

// required .ps.meta.command cmd = 1;
bool meta::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void meta::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void meta::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void meta::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
::ps::meta_command meta::cmd() const {
  // @@protoc_insertion_point(field_get:ps.meta.cmd)
  return static_cast< ::ps::meta_command >(cmd_);
}
void meta::set_cmd(::ps::meta_command value) {
  assert(::ps::meta_command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.cmd)
}

// required int32 sender = 2;
bool meta::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void meta::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
void meta::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
void meta::clear_sender() {
  sender_ = 0;
  clear_has_sender();
}
::google::protobuf::int32 meta::sender() const {
  // @@protoc_insertion_point(field_get:ps.meta.sender)
  return sender_;
}
void meta::set_sender(::google::protobuf::int32 value) {
  set_has_sender();
  sender_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.sender)
}

// required int32 receiver = 3;
bool meta::has_receiver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void meta::set_has_receiver() {
  _has_bits_[0] |= 0x00000004u;
}
void meta::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000004u;
}
void meta::clear_receiver() {
  receiver_ = 0;
  clear_has_receiver();
}
::google::protobuf::int32 meta::receiver() const {
  // @@protoc_insertion_point(field_get:ps.meta.receiver)
  return receiver_;
}
void meta::set_receiver(::google::protobuf::int32 value) {
  set_has_receiver();
  receiver_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.receiver)
}

// required int32 timestamp = 4;
bool meta::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void meta::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void meta::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void meta::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
::google::protobuf::int32 meta::timestamp() const {
  // @@protoc_insertion_point(field_get:ps.meta.timestamp)
  return timestamp_;
}
void meta::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.timestamp)
}

// required bool request = 5;
bool meta::has_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void meta::set_has_request() {
  _has_bits_[0] |= 0x00000010u;
}
void meta::clear_has_request() {
  _has_bits_[0] &= ~0x00000010u;
}
void meta::clear_request() {
  request_ = false;
  clear_has_request();
}
bool meta::request() const {
  // @@protoc_insertion_point(field_get:ps.meta.request)
  return request_;
}
void meta::set_request(bool value) {
  set_has_request();
  request_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.request)
}

// required bool push = 6;
bool meta::has_push() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void meta::set_has_push() {
  _has_bits_[0] |= 0x00000020u;
}
void meta::clear_has_push() {
  _has_bits_[0] &= ~0x00000020u;
}
void meta::clear_push() {
  push_ = false;
  clear_has_push();
}
bool meta::push() const {
  // @@protoc_insertion_point(field_get:ps.meta.push)
  return push_;
}
void meta::set_push(bool value) {
  set_has_push();
  push_ = value;
  // @@protoc_insertion_point(field_set:ps.meta.push)
}

// repeated .ps.meta.node_ node = 7;
int meta::node_size() const {
  return node_.size();
}
void meta::clear_node() {
  node_.Clear();
}
const ::ps::meta_node_& meta::node(int index) const {
  // @@protoc_insertion_point(field_get:ps.meta.node)
  return node_.Get(index);
}
::ps::meta_node_* meta::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:ps.meta.node)
  return node_.Mutable(index);
}
::ps::meta_node_* meta::add_node() {
  // @@protoc_insertion_point(field_add:ps.meta.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::ps::meta_node_ >*
meta::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:ps.meta.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::ps::meta_node_ >&
meta::node() const {
  // @@protoc_insertion_point(field_list:ps.meta.node)
  return node_;
}

// repeated .ps.meta.type_ data_type = 8;
int meta::data_type_size() const {
  return data_type_.size();
}
void meta::clear_data_type() {
  data_type_.Clear();
}
::ps::meta_type_ meta::data_type(int index) const {
  // @@protoc_insertion_point(field_get:ps.meta.data_type)
  return static_cast< ::ps::meta_type_ >(data_type_.Get(index));
}
void meta::set_data_type(int index, ::ps::meta_type_ value) {
  assert(::ps::meta_type__IsValid(value));
  data_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ps.meta.data_type)
}
void meta::add_data_type(::ps::meta_type_ value) {
  assert(::ps::meta_type__IsValid(value));
  data_type_.Add(value);
  // @@protoc_insertion_point(field_add:ps.meta.data_type)
}
const ::google::protobuf::RepeatedField<int>&
meta::data_type() const {
  // @@protoc_insertion_point(field_list:ps.meta.data_type)
  return data_type_;
}
::google::protobuf::RepeatedField<int>*
meta::mutable_data_type() {
  // @@protoc_insertion_point(field_mutable_list:ps.meta.data_type)
  return &data_type_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ps

// @@protoc_insertion_point(global_scope)
